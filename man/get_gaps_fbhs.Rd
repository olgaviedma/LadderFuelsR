% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gap_fbh.R
\name{get_gaps_fbhs}
\alias{get_gaps_fbhs}
\title{Gaps and Fuel layers Base Height (fbh)}
\usage{
get_gaps_fbhs (LAD_profiles)
}
\arguments{
\item{LAD_profiles}{original tree Leaf Area Index (LAD) profile (output of [lad.profile()] function in the \emph{leafR} package.
An object of the class text}
}
\value{
A data frame giving the height of gaps and fuel layers bases in meters.
}
\description{
This function calculates gaps and fuel layers base height (fbh) as the difference in percentiles between consecutive LAD values along the vertical tree profile (VTP).
Negative differences are linked to gaps and positive differences to fuel base height.
}
\details{
# List of tree metrics:
\itemize{
\item treeID: tree ID with strings and numeric values
\item treeID1: tree ID with only numeric values
\item cbh - Height of the fuel layer base height (m)
\item gap - Height of gap between fuel layers (m)
\item gap_lad: LAD value in the gap height
\item gap_perc - Percentage of LAD in the gap height
\item cbh_lad - LAD value in the fuel base height
\item cbh_perc - Percentage of LAD in the fuel base height
\item max_height - Maximum height of the tree profile
}
}
\examples{
## Not run:
library(dplyr)
library(magrittr)

# LAD profiles derived from normalized ALS data after applying [lad.profile()] function
data_path <- file.path(system.file("extdata", package = "LadderFuelsR"), "LAD_profiles.txt")
LAD_profiles <- read.table(data_path, sep = "\t", header = TRUE)
LAD_profiles$treeID <- factor(LAD_profiles$treeID)

trees_name1 <- as.character(LAD_profiles$treeID)
trees_name2 <- factor(unique(trees_name1))

metrics_precentile_list<-list()
for (i in levels(trees_name2)) {
  tree2 <- LAD_profiles |> dplyr::filter(treeID == i)
  metrics_precentil <- get_gaps_fbhs(tree2)
  metrics_precentile_list[[i]] <- metrics_precentil
}

metrics_all_percentil <- dplyr::bind_rows(metrics_precentile_list)
metrics_all_percentil$treeID <- factor(metrics_all_percentil$treeID)

# Remove the row with all NA values from the original data frame
# First remove "treeID" and "treeID1" columns
tree_metrics_no_treeID <- metrics_all_percentil[, -which(names(metrics_all_percentil) == c("treeID","treeID1"))]

# Check if any row has all NA values
rows_with_all_NA_or_zero <- apply(tree_metrics_no_treeID, 1, function(row) all(is.na(row) | row == 0))

# Get the row index with all NA values
row_index <- which(rows_with_all_NA_or_zero)

# Remove the row with all NA values from the original data frame
if (length(row_index) > 0) {
  tree_metrics_filtered <- metrics_all_percentil[-row_index, ]
} else {
  tree_metrics_filtered <- metrics_all_percentil
}
write.table(tree_metrics_filtered, file= file.path(system.file("extdata", package = "LadderFuelsR"), "1_gaps_fbhs_metrics.txt"),
sep = "\t",row.names = FALSE)
## End(Not run)
}
\author{
Olga Viedma.
}
